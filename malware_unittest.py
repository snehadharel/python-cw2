import unittest
import os
import shutil
from GUI_login import connect_to_db, check_file, QUARANTINE_FOLDER, SUSPICIOUS_EXTENSIONS, MALICIOUS_KEYWORDS

class TestMalwareDetectionTool(unittest.TestCase):

    def setUp(self):
        """Setup test environment before each test"""
        self.test_safe_file = "safe_file.txt"
        self.test_malicious_file = "malicious_file.bat"
        self.test_quarantine_file = "quarantine_test.exe"

        # Create a safe file
        with open(self.test_safe_file, "w") as f:
            f.write("This is a clean file with no malicious content.")

        # Create a malicious file
        with open(self.test_malicious_file, "w") as f:
            f.write("This file contains a suspicious command: powershell -exec bypass")

        # Create quarantine folder if not exists
        os.makedirs(QUARANTINE_FOLDER, exist_ok=True)

    def tearDown(self):
        """Cleanup after each test"""
        for file in [self.test_safe_file, self.test_malicious_file]:
            if os.path.exists(file):
                os.remove(file)

        quarantine_path = os.path.join(QUARANTINE_FOLDER, self.test_quarantine_file)
        if os.path.exists(quarantine_path):
            os.remove(quarantine_path)

    def test_connect_to_db(self):
        """Test if database connection is successful"""
        connection = connect_to_db()
        self.assertIsNotNone(connection)
        if connection:
            connection.close()

    def test_check_safe_file(self):
        """Test scanning a safe file"""
        result = check_file(self.test_safe_file)
        self.assertIn("✅ Safe", result)

    def test_check_malicious_file(self):
        """Test scanning a file with malicious content"""
        result = check_file(self.test_malicious_file)
        self.assertIn("⚠ Malware Detected", result)

    def test_check_malicious_extension(self):
        """Test scanning a file with a suspicious extension"""
        test_file = "test_malicious.exe"
        with open(test_file, "w") as f:
            f.write("Normal text, but dangerous extension.")

        result = check_file(test_file)
        os.remove(test_file)
        self.assertIn("⚠ Malware Detected", result)

    def test_move_to_quarantine(self):
        """Test moving a file to quarantine"""
        original_path = self.test_quarantine_file
        with open(original_path, "w") as f:
            f.write("Suspicious file to be quarantined.")

        quarantine_path = os.path.join(QUARANTINE_FOLDER, self.test_quarantine_file)
        shutil.move(original_path, quarantine_path)

        self.assertTrue(os.path.exists(quarantine_path))
        os.remove(quarantine_path)  # Cleanup

    def test_suspicious_extensions(self):
        """Test if file extensions are correctly detected as suspicious"""
        for ext in SUSPICIOUS_EXTENSIONS:
            filename = f"test_file{ext}"
            with open(filename, "w") as f:
                f.write("Test content")

            result = check_file(filename)
            os.remove(filename)
            self.assertIn("⚠ Malware Detected", result)

    def test_malicious_keywords(self):
        """Test if malicious keywords are correctly detected in a file"""
        for keyword in MALICIOUS_KEYWORDS:
            filename = f"test_{keyword}.txt"
            with open(filename, "w") as f:
                f.write(f"This file contains a suspicious keyword: {keyword}")

            result = check_file(filename)
            os.remove(filename)
            self.assertIn("⚠ Malware Detected", result)

if __name__ == "__main__":
    unittest.main()
